{"version":3,"file":"static/js/766.2ac3ec6b.chunk.js","mappings":"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","sources":["components/ReviewsList/ReviewsList.styled.jsx","components/ReviewsList/ReviewsList.jsx","components/Reviews.jsx","services/movie-api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  height: 400px;\n  overflow-y: scroll;\n  ::-webkit-scrollbar {\n    width: 12px;\n  }\n\n  ::-webkit-scrollbar-track {\n    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n    border-radius: 10px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background-color: blue;\n    border-radius: 10px;\n    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5);\n  }\n`;\n\nexport const ReviewAuthor = styled.h3`\n  margin-bottom: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { List, ReviewAuthor } from './ReviewsList.styled';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <List>\n      {reviews.map(({ id, author, content }) => (\n        <li key={id}>\n          <ReviewAuthor>{author}</ReviewAuthor>\n          <p>{content}</p>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ReviewsList;\n","import { useState, useEffect } from 'react';\nimport { fetchMovieReviews } from 'services/movie-api';\nimport { useParams } from 'react-router-dom';\nimport Loader from './Loader/Loader';\nimport ReviewsList from './ReviewsList/ReviewsList';\n\nconst Reviews = () => {\n  const { Id } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [totalResults, setTotalResults] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadMovieReviews = async () => {\n      try {\n        setIsLoading(true);\n        const { data, results, total_results } = await fetchMovieReviews(Id);\n        setMovieReviews(results);\n        setTotalResults(total_results);\n        console.log(data);\n      } catch (error) {\n        setError('Error while loading data. Try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadMovieReviews();\n  }, [Id]);\n\n  return (\n    <>\n      {error ? (\n        <p>{error}</p>\n      ) : (\n        <>\n          {isLoading && <Loader />}\n          {totalResults === 0 && !error ? (\n            <p>We didn't find any reviews for this movie</p>\n          ) : (\n            <ReviewsList reviews={movieReviews} />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '92d66af10495782dbf7116658cb2e14f';\n\nexport async function fetchTrendingMovies(page) {\n  try {\n    const url = `${BASE_URL}trending/movie/week?api_key=${API_KEY}&language=en-US&page=${page}`;\n\n    const response = await axios.get(url);\n    console.log(response.data.results);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMoviesByName(page, query) {\n  try {\n    const searchParams = new URLSearchParams({\n      api_key: '92d66af10495782dbf7116658cb2e14f',\n      query: query,\n      page: page,\n      include_adult: false,\n    });\n    const url = `${BASE_URL}search/movie?${searchParams}`;\n    const response = await axios.get(url);\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMovieDetails(id) {\n  try {\n    const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}`;\n    const response = await axios.get(url);\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMovieCast(id) {\n  try {\n    const url = `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(url);\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMovieReviews(id) {\n  try {\n    const url = `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(url);\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["List","styled","ReviewAuthor","reviews","map","id","author","content","Id","useParams","useState","movieReviews","setMovieReviews","totalResults","setTotalResults","isLoading","setIsLoading","error","setError","useEffect","loadMovieReviews","fetchMovieReviews","data","results","total_results","console","log","Loader","BASE_URL","API_KEY","fetchTrendingMovies","page","url","axios","response","fetchMoviesByName","query","searchParams","URLSearchParams","api_key","include_adult","fetchMovieDetails","fetchMovieCast"],"sourceRoot":""}